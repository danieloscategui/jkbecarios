-- DROP TABLES
DROP TABLE BECA_BENEFICIOS;
DROP TABLE BENEFICIOS;
DROP TABLE PAGO_SUBVENCION;
DROP TABLE PAGO_ACADEMICO;
DROP TABLE TRAMITES;
DROP TABLE CONDICION_PAGO;
DROP TABLE BECARIOS;
DROP TABLE BECAS;
DROP TABLE ASESORES;
DROP TABLE IES;

-- DROP SEQUENCES
DROP SEQUENCE PAGO_SUBVENCION_SEQ;
DROP SEQUENCE PAGO_ACADEMICO_SEQ;
DROP SEQUENCE TRAMITES_SEQ;
DROP SEQUENCE CONDICION_PAGO_SEQ;
DROP SEQUENCE BECAS_SEQ;
DROP SEQUENCE BENEFICIOS_SEQ;
DROP SEQUENCE ASESORES_SEQ;
DROP SEQUENCE IES_SEQ;

-- CREATE TABLES
CREATE TABLE BECARIOS(
  DNI VARCHAR2(8) NOT NULL,
  APELLIDO_MATERNO VARCHAR2(100) NOT NULL,
  APELLIDO_PATERNO VARCHAR2(100) NOT NULL,
  NOMBRES VARCHAR2(100) NOT NULL,
  FECHA_NACIMIENTO DATE NOT NULL,
  EDAD NUMBER(2),
  SEXO VARCHAR2(30),
  NUMERO_EXPEDIENTE VARCHAR2(50),
  ID_BECA NUMBER(4),
  REPRESENTANTE_LEGAL VARCHAR2(255),
  TELEFONOS VARCHAR2(100),
  CORREO_PRONABEC VARCHAR2(100),
  CORREO_PERSONAL VARCHAR2(100),
  DIRECCION VARCHAR2(200),
  REGION_PROCEDENCIA VARCHAR2(100),
  PROVINCIA_PROCEDENCIA VARCHAR2(100),
  DISTRITO_PROCEDENCIA VARCHAR2(100),
  REGION_POSTULACION VARCHAR2(100),
  PROVINCIA_POSTULACION VARCHAR2(100),
  DISTRITO_POSTULACION VARCHAR2(100),
  RESOLUCION_ADJUDICACION VARCHAR2(100),
  RESOLUCION_ADJUDICACION_FECHA DATE,
  ESTADO_ACTUAL VARCHAR2(100)
);

CREATE TABLE BECAS(
  ID_BECA NUMBER(4) NOT NULL,
  CONVOCATORIA VARCHAR2(30),
  MODALIDAD VARCHAR2(200),
  ID_IES NUMBER(4),
  REGION_ESTUDIO VARCHAR2(100),
  SEDE_ESTUDIO VARCHAR2(100),
  CARRERA VARCHAR2(200),
  INICIO_BECA DATE,
  TERMINO_BECA DATE,
  SEMESTRE_EGRESO VARCHAR2(20),
  ASESOR_RESPONSABLE NUMBER(3)
);

CREATE TABLE IES(
  ID_IES NUMBER(4) NOT NULL,
  IES_NOMBRE VARCHAR2(200),
  TIPO_IES VARCHAR2(100),
  TIPO_GESTION VARCHAR2(100)
);

CREATE TABLE TRAMITES(
  ID_TRAMITE NUMBER(5) NOT NULL,
  DNI_BECARIO VARCHAR2(8) NOT NULL,
  NUMERO_SIGEDO VARCHAR2(20),
  MOTIVO VARCHAR2(255),
  OFICINA_DESTINO VARCHAR(200),
  ESTADO VARCHAR2(100),
  TIPO_DOC_RESPUESTA VARCHAR2(100),
  NUMERO_DOCUMENTO VARCHAR2(100),
  FECHA_DOCUMENTO DATE
);

CREATE TABLE BENEFICIOS(
  ID_BENEFICIO NUMBER(3) NOT NULL,
  DESCRIPCION VARCHAR2(200)
);

CREATE TABLE BECA_BENEFICIOS(
  ID_BECA NUMBER(4) NOT NULL,
  ID_BENEFICIOS NUMBER(3) NOT NULL
);

CREATE TABLE CONDICION_PAGO(
  ID_CONDICION_PAGO NUMBER(5)  NOT NULL,
  FECHA DATE,
  DNI_BECARIO VARCHAR2(8),
  ESTADO VARCHAR2(100),
  CONDICION_SIBEC VARCHAR2(100),
  SITUACION VARCHAR2(100),
  CONDICION_SUBVENCION VARCHAR2(100)
);

CREATE TABLE PAGO_ACADEMICO(
  ID_PAGO_ACADEMICO NUMBER(5) NOT NULL,
  NUMERO_CONVENIO VARCHAR2(100),
  MES VARCHAR2(30),
  NUMERO_CUOTA VARCHAR2(20),
  NUMERO_SOLICITUD VARCHAR2(50),
  FECHA_SOLICITUD DATE,
  NUMERO_CONFORMIDAD VARCHAR2(50),
  CANTIDAD_BECARIOS NUMBER,
  MONTO_TOTAL  NUMBER(8,2),
  PAGO_MATERIALES NUMBER(8,2)
);

CREATE TABLE PAGO_SUBVENCION(
  ID_PAGO_SUBVENCION NUMBER(5) NOT NULL,
  ID_BECA NUMBER(4),
  DNI_BECARIO VARCHAR2(8),
  MONTO_SUBVENCION NUMBER(8,2),
  MES VARCHAR2(30),
  SOLICITUD VARCHAR2(100),
  CONFORMIDAD VARCHAR2(100),
  MONTO_TOTAL NUMBER(8,2)
);

CREATE TABLE ASESORES(
  ID_ASESOR NUMBER(3) NOT NULL,
  ASESOR VARCHAR2(200)
);

-- CREATE PRIMARY AND FOREIGN KEYS 
ALTER TABLE ASESORES
ADD CONSTRAINT ASESORES_PK PRIMARY KEY (ID_ASESOR);

ALTER TABLE BECARIOS
ADD CONSTRAINT BECARIOS_PK PRIMARY KEY (DNI);

ALTER TABLE BECAS 
ADD CONSTRAINT BECAS_PK PRIMARY KEY (ID_BECA);

ALTER TABLE BECARIOS
ADD CONSTRAINT BECARIOS_FK_BECARIO FOREIGN KEY (ID_BECA)
REFERENCES BECAS (ID_BECA);

ALTER TABLE BECAS
ADD CONSTRAINT BECAS_FK_ASESORES FOREIGN KEY (ASESOR_RESPONSABLE)
REFERENCES ASESORES(ID_ASESOR);

ALTER TABLE BENEFICIOS 
ADD CONSTRAINT BENEFICIOS_PK PRIMARY KEY (ID_BENEFICIO);

ALTER TABLE BECA_BENEFICIOS
ADD CONSTRAINT BECA_BENEFICIOS_FK_BECA FOREIGN KEY (ID_BECA)
REFERENCES BECAS(ID_BECA);

ALTER TABLE BECA_BENEFICIOS
ADD CONSTRAINT BECA_BENEFICIOS_FK_BENEFICIO FOREIGN KEY (ID_BENEFICIOS)
REFERENCES BENEFICIOS (ID_BENEFICIO);

ALTER TABLE PAGO_SUBVENCION
ADD CONSTRAINT PAGO_SUBVENCION_PK PRIMARY KEY (ID_PAGO_SUBVENCION);

ALTER TABLE PAGO_SUBVENCION
ADD CONSTRAINT PAGO_SUBNVENCION_FK_BECARIO FOREIGN KEY (DNI_BECARIO)
REFERENCES BECARIOS(DNI);

ALTER TABLE TRAMITES
ADD CONSTRAINT TRAMITES_PK PRIMARY KEY (ID_TRAMITE);

ALTER TABLE TRAMITES
ADD CONSTRAINT TRAMITES_FK_BECARIO FOREIGN KEY (DNI_BECARIO)
REFERENCES BECARIOS(DNI);

ALTER TABLE CONDICION_PAGO
ADD CONSTRAINT CONDICION_PAGO_PK PRIMARY KEY (ID_CONDICION_PAGO);

ALTER TABLE CONDICION_PAGO
ADD CONSTRAINT CONDICION_PAGO_FK_BECARIO FOREIGN KEY (DNI_BECARIO)
REFERENCES BECARIOS(DNI);

ALTER TABLE IES
ADD CONSTRAINT IES_PK PRIMARY KEY (ID_IES);

ALTER TABLE BECAS
ADD CONSTRAINT BECAS_FK_IES FOREIGN KEY (ID_IES)
REFERENCES IES (ID_IES);

-- CREATE SEQUENCES
CREATE SEQUENCE BECAS_SEQ
MINVALUE 1
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;

CREATE SEQUENCE IES_SEQ
MINVALUE 1
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;

CREATE SEQUENCE TRAMITES_SEQ
MINVALUE 1
MAXVALUE 99999
START WITH 1
INCREMENT BY 1
CACHE 20;


CREATE SEQUENCE BENEFICIOS_SEQ
MINVALUE 1
MAXVALUE 999
START WITH 1
INCREMENT BY 1
CACHE 20;


CREATE SEQUENCE CONDICION_PAGO_SEQ
MINVALUE 1
MAXVALUE 99999
START WITH 1
INCREMENT BY 1
CACHE 20;


CREATE SEQUENCE PAGO_ACADEMICO_SEQ
MINVALUE 1
MAXVALUE 99999
START WITH 1
INCREMENT BY 1
CACHE 20;


CREATE SEQUENCE PAGO_SUBVENCION_SEQ
MINVALUE 1
MAXVALUE 99999
START WITH 1
INCREMENT BY 1
CACHE 20;


CREATE SEQUENCE ASESORES_SEQ
MINVALUE 1
MAXVALUE 999
START WITH 1
INCREMENT BY 1
CACHE 20;


-- EXTERNAL TABLE TO LOAD DATA / SAVE AS CVS UTF8 FORMAT
/*
CREATE TABLE DB_BECARIOS_EXT(
	IES_NOMBRE VARCHAR2(200),
	IES_TIPO VARCHAR2(100),
	IES_GESTION VARCHAR2(100),
	ASESOR_NOMBRE VARCHAR2(200),
	BECA_CONVOCATORIA VARCHAR2(30),
	BECA_MODALIDAD VARCHAR2(200),
	BECA_REGION_ESTUDIO VARCHAR2(100),
	BECA_SEDE_ESTUDIO VARCHAR2(100),
	BECA_CARRERA VARCHAR2(200),
	BECA_INICIO DATE,
	BECA_TERMINO DATE,
	BECA_SEMESTRE_EGRESO VARCHAR2(20)
) ORGANIZATION EXTERNAL (
  TYPE ORACLE_LOADER
  DEFAULT DIRECTORY ORACLE_DAT_DIR
  ACCESS PARAMETERS  
  (
    RECORDS DELIMITED BY NEWLINE 
    BADFILE ORACLE_BAD_DIR: 'BD_BECARIOS_EXT%a_%p.bad'
    LOGFILE ORACLE_LOG_DIR: 'BD_BECARIOS_EXT%a_%p.log'
    FIELDS TERMINATED BY ','
	MISSING FIELD VALUES ARE NULL
    (
      IES_NOMBRE, IES_TIPO, IES_GESTION, ASESOR_NOMBRE,
      BECA_CONVOCATORIA, BECA_MODALIDAD, BECA_REGION_ESTUDIO, BECA_SEDE_ESTUDIO,
      BECA_CARRERA, BECA_INICIO DATE "DD/MM/YYYY" , BECA_TERMINO DATE "DD/MM/YYYY" , BECA_SEMESTRE_EGRESO
    )
  )
  LOCATION ('DB_BECARIOS_UTF8.csv')
)
REJECT LIMIT UNLIMITED;
*/
/*
CREATE OR REPLACE PACKAGE becario_pkg AS
  
  FUNCTION asesor_existe(nombre_asesor VARCHAR2) RETURN NUMBER;
  FUNCTION ies_existe(nombre_ies VARCHAR2) RETURN NUMBER;
  FUNCTION beca_existe(convocatoria_beca VARCHAR2, modalidad_beca VARCHAR2, region_beca VARCHAR2, 
          sede_beca VARCHAR2, carrera_beca VARCHAR2) RETURN NUMBER;
  FUNCTION becario_existe(becario_dni VARCHAR2) RETURN VARCHAR2;
  FUNCTION crear_asesor(nombre_asesor VARCHAR2) RETURN NUMBER;
  FUNCTION crear_ies (nombre_ies VARCHAR2, tipo_ies VARCHAR2, gestion_ies VARCHAR2) RETURN NUMBER;
  FUNCTION crear_beca (asesor_id NUMBER, ies_id NUMBER, convocatoria_beca VARCHAR2, modalidad_beca VARCHAR2, 
          region_beca VARCHAR2, sede_beca VARCHAR2, carrera_beca VARCHAR2, inicio_beca DATE, 
          termino_beca DATE, semestre_egreso_beca VARCHAR2) RETURN NUMBER;
  --PROCEDURE CREAR_BECARIO();
END becario_pkg;
/
CREATE OR REPLACE PACKAGE BODY becario_pkg AS

  FUNCTION asesor_existe(nombre_asesor VARCHAR2) RETURN NUMBER IS
    asesor_id NUMBER;
  BEGIN    
    BEGIN
      SELECT id_asesor INTO asesor_id 
      FROM asesores
      WHERE upper(asesor) = upper(trim(nombre_asesor));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      asesor_id := 0;
    END;
    RETURN asesor_id;
  END asesor_existe;
  
  FUNCTION ies_existe(nombre_ies VARCHAR2) RETURN NUMBER IS
    ies_id number;
  BEGIN
    BEGIN
      SELECT id_ies INTO ies_id
      FROM ies
      WHERE upper(ies_nombre) = upper(trim(nombre_ies));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ies_id := 0;
    END;
    RETURN ies_id;
  END ies_existe;
  
  FUNCTION beca_existe(convocatoria_beca VARCHAR2, modalidad_beca VARCHAR2, region_beca VARCHAR2, 
          sede_beca VARCHAR2, carrera_beca VARCHAR2) RETURN NUMBER IS
    beca_id NUMBER;
  BEGIN
    BEGIN
    
      SELECT id_beca INTO beca_id
      FROM becas
      WHERE upper(convocatoria) = upper(trim(convocatoria_beca))
      AND   upper(modalidad) = upper(trim(modalidad_beca))
      AND   upper(region_estudio) = upper(trim(region_beca))
      AND   upper(sede_estudio) = upper(trim(sede_beca))
      AND   upper(carrera) = upper(trim(carrera_beca));
      
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        beca_id := 0;
    END;
    RETURN beca_id;
  END beca_existe;
          
  FUNCTION becario_existe(becario_dni VARCHAR2) RETURN VARCHAR2 IS
    dni_to_check VARCHAR2(8);
  BEGIN 
    BEGIN
      SELECT dni INTO dni_to_check
      FROM becarios 
      WHERE trim(dni) = trim(becario_dni);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        dni_to_check := 'NONE';  
    END;
    RETURN dni_to_check;
  END becario_existe;
  
  FUNCTION crear_asesor(nombre_asesor VARCHAR2) RETURN NUMBER IS
    new_asesor_id NUMBER;
  BEGIN
    SELECT asesores_seq.NEXTVAL INTO new_asesor_id FROM dual;
    INSERT INTO asesores VALUES (new_asesor_id, trim(nombre_asesor));
    RETURN new_asesor_id;
  END crear_asesor;
  
  FUNCTION crear_ies (nombre_ies VARCHAR2, tipo_ies VARCHAR2, gestion_ies VARCHAR2) RETURN NUMBER IS
    new_ies_id NUMBER;
  BEGIN 
    SELECT ies_seq.NEXTVAL INTO new_ies_id  FROM dual;
    INSERT INTO IES VALUES (new_ies_id, upper(trim(nombre_ies)), upper(trim(tipo_ies)), upper(trim(gestion_ies)));
    RETURN new_ies_id;
  END crear_ies;
  
  
  FUNCTION crear_beca (asesor_id NUMBER, ies_id NUMBER, convocatoria_beca VARCHAR2, modalidad_beca VARCHAR2, 
          region_beca VARCHAR2, sede_beca VARCHAR2, carrera_beca VARCHAR2, inicio_beca DATE, 
          termino_beca DATE, semestre_egreso_beca VARCHAR2) RETURN NUMBER IS
    beca_id NUMBER;
  BEGIN 
    SELECT becas_seq.NEXTVAL INTO beca_id FROM dual;
    INSERT INTO becas VALUES (beca_id, convocatoria_beca, modalidad_beca, ies_id, region_beca, sede_beca,
    carrera_beca, to_date(inicio_beca, 'DD/MM/YYYY'), to_date(termino_beca, 'DD/MM/YYYY'), semestre_egreso_beca, asesor_id);
    RETURN beca_id;
  END crear_beca;

         
END becario_pkg;
*/

/*
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE load_becario IS

  CURSOR becario_cur IS SELECT * FROM db_becarios_ext;
  b_rec db_becarios_ext%ROWTYPE;
  
  asesor_id number;
  ies_id number;
  beca_id number;
  
BEGIN
  OPEN becario_cur;
  LOOP
    FETCH becario_cur INTO b_rec;
    EXIT WHEN becario_cur%NOTFOUND;
    
    asesor_id := becario_pkg.asesor_existe(b_rec.asesor_nombre);  
    ies_id := becario_pkg.ies_existe(b_rec.ies_nombre);
    beca_id := becario_pkg.beca_existe(b_rec.beca_convocatoria, b_rec.beca_modalidad, b_rec.beca_region_estudio,
                                      b_rec.beca_sede_estudio, b_rec.beca_carrera);
    IF asesor_id = 0 THEN
      asesor_id := becario_pkg.crear_asesor(b_rec.asesor_nombre);
    END IF;
    
    IF ies_id = 0 THEN
      ies_id :=  becario_pkg.crear_ies(b_rec.ies_nombre,b_rec.ies_tipo, b_rec.ies_gestion);
    END IF;
    
    IF beca_id = 0 THEN
      beca_id := becario_pkg.crear_beca(asesor_id, ies_id, b_rec.beca_convocatoria, b_rec.beca_modalidad,
                  b_rec.beca_region_estudio, b_rec.beca_sede_estudio, b_rec.beca_carrera, b_rec.beca_inicio,
                  b_rec.beca_termino, b_rec.beca_semestre_egreso);
    END IF;
    
    -- DBMS_OUTPUT.PUT_LINE('Contador: ' || becario_cur%ROWCOUNT);
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('Contador Total: ' || becario_cur%ROWCOUNT);
  CLOSE becario_cur;
  COMMIT;
END;
*/