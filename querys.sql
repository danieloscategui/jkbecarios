
SELECT BECAS.CONVOCATORIA, BECAS.MODALIDAD, COUNT(BECARIOS.DNI) AS TOTAL
FROM BECAS 
INNER JOIN BECARIOS
ON BECAS.ID_BECA = BECARIOS.ID_BECA
GROUP BY BECAS.CONVOCATORIA, BECAS.MODALIDAD;

SELECT IES.IES_NOMBRE, BECAS.CONVOCATORIA, BECAS.CARRERA, BECARIOS.ESTADO_ACTUAL
FROM IES 
INNER JOIN BECAS
ON IES.ID_IES = BECAS.ID_IES
INNER JOIN BECARIOS
ON BECAS.ID_BECA = BECARIOS.ID_BECA;


SELECT IES.TIPO_IES, IES.TIPO_GESTION FROM IES;


UPDATE IES SET IES.TIPO_GESTION = 'PRIVADO', IES.TIPO_IES = 'UNIVERSIDAD';

SELECT IES_NOMBRE FROM IES;

SELECT ASESOR FROM ASESORES;


INSERT INTO daniel.asesores(id_asesor, asesor) VALUES (asesores_seq.nextval, 'Maribel'); -- change Camus

UPDATE IES
SET TIPO_IES = 'UNIVERSIDAD'
where TIPO_IES = 'UNVERSIDAD'

select * from ies;
SELECT * FROM ASESORES;

SELECT * FROM DB_BECARIOS_EXT;
SELECT COUNT(*) FROM DB_BECARIOS_EXT;


-- STORE PROCEDURE TO DISTRIBUTE DB_BECARIOS_EXT TABLE INTO THREE TABLES: ASESORES, IES, BECAS, BECARIOS
-- LOOP EACH ROW, CHECK ASESOR_NOMBRE, IES_NOMBRE FIRST
-- ASESOR_ID = IF ASESOR DOESN'T EXIST THEN INSERT ASESOR ANG GET ITS NEW ID CREATED ELSE GET ID
-- IES_ID = IF IES_NOMBRES DOESN'T EXIST THEN INSERT IES_NOMBRE, IES_TIPO,IES_GESTION AND GET ITS NEW ID CREATED ELSE GET ID
-- BECA_ID = IF BECA_CONVOCATORIA, BECA_MODALIDAD, BECA_REGION, BECA_SEDE, BECA_CARRERA DOESN'T EXIST THEN INSERT AND GET ITS
--  ID CREATED ELSE GET ID
-- BECARIO_DNI = IF BECARIO_DNI DOESN'T EXIST THEN INSERT ELSE SKIP.

-- NUMBER ASESOR_EXISTE(ASESOR_NOMBRE);
-- NUMBER IES_EXISTE(IES_NOMBRE);
-- NUMBER BECA_EXISTE(BECA_CONVOCATORIA, BECA_MODALIDAD, BECA_REGION, BECA_SEDE, BECA_CARRERA);
-- VARCHAR2 BECARIO_EXISTE(DNI);

-- INSERT ASESOR(ASESOR_NOMBRE);
-- INSERT IES(IES_NOMBRE, IES_ITPO, IES_GESTION);
-- INSERT BECA(ASESOR_ID, IES_ID, BECA_CONVOCATORIA, BECA_MODALIDAD, BECA_REGION_ESTUDIO, BECA_SEDE_ESTUDIO, BECA_CARRERA, BECA_INICIO, BECA_TERMINO, BECA_SEMESTRE_EGRESO);
-- INSERT BECARIO();
-- CARGAR_DATOS();

CREATE OR REPLACE PACKAGE becario_pkg AS
  FUNCTION ASESOR_EXISTE(ASESOR_NOMBRE VARCHAR2) RETURN NUMBER;
  FUNCTION IES_EXISTE(IES_NOMBRE VARCHAR2) RETURN NUMBER;
  FUNCTION BECA_EXISTE(BECA_CONVOCATORIA VARCHAR2, BECA_MODALIDAD VARCHAR2, BECA_REGION VARCHAR2, 
          BECA_SEDE_ESTUDIO VARCHAR2, BECA_CARRERA VARCHAR2) RETURN NUMBER;
  FUNCTION BECARIO_EXISTE(DNI VARCHAR2) RETURN VARCHAR2;
  FUNCTION CREAR_ASESOR(ASESOR_NOMBRE VARCHAR2) RETURN NUMBER;
  FUNCTION CREAR_IES(IES_NOMBRE VARCHAR2, IES_ITPO VARCHAR2, IES_GESTION VARCHAR2) RETURN NUMBER;
  FUNCTION CREAR_BECA(ASESOR_ID NUMBER, IES_ID NUMBER, BECA_CONVOCATORIA VARCHAR2, BECA_MODALIDAD VARCHAR2, 
          BECA_REGION_ESTUDIO VARCHAR2, BECA_SEDE_ESTUDIO VARCHAR2, BECA_CARRERA VARCHAR2, BECA_INICIO DATE, 
          BECA_TERMINO DATE, BECA_SEMESTRE_EGRESO VARCHAR2) RETURN NUMBER;
  --PROCEDURE CREAR_BECARIO();
END becario_pkg;
/
CREATE OR REPLACE PACKAGE BODY becario_pkg AS
END becario_pkg;
/